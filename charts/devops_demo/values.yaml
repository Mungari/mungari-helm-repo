# Default values for devops_demo.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  # -- Set to false if you already have a kubernetes instance
  db_deploy: True
  # -- Set to true if you have an external db connection
  db_external: False 
  # -- Set address if you have an external DB
  db_external_address: "changeme"


demo_app:
  # -- Default number of replicas
  replicaCount: 3
  image:
    # -- DevOps demo container image
    repository: ghcr.io/perceptolab/devops-demo-app
    pullPolicy: IfNotPresent

  # -- Change if you want to run in a different namespace
  namespace: "default"
  labels:
    # -- Default label to select deployment
    app: "demo_app"
  fullname: "devops-demo" 

  service:
    # -- LoadBalancer type
    type: LoadBalancer
    # -- Exposes on port 80 externally
    port: 80
    # -- To port 8080
    targetPort: 8080

  configMap:
    # -- ConfigMap name for demoapp
    name: "demo-app-configs"

  secret:
    # -- Secret name for demoapp
    name: "demo-app-secrets"
    
  resources:
    limits:
      # -- How much memory we need
      memory: "1Gi"
    requests:
      # -- How much we request 
      memory: "1Gi"
  
  autoscaling: 
    enabled: False
  imagePullSecrets: {}
  podAnnotations: {}
  # -- Select deployment
  selectorLabels:
    app: "demo_app"
  serviceAccountName: {}
  podSecurityContext: {}
  
#### POSTGRES CONFIG #####
postgres:
  
  fullname: "postgresql-db"
  # -- ServiceName for StatefulSet
  serviceName: "postgres"

  # -- If you're running in a different namespace or if you already have a postgresql instance
  namespace: "default"
  # -- Default number of replicas
  replicaCount: 1
  labels:
  # -- Label to select pod
    app: "postgres"
  image:
    # -- Postgres image
    repository: postgres
    # -- Using latest tag
    tag: latest
    pullPolicy: IfNotPresent

  configMap:
    # -- ConfigMap name for postgres
    name: "postgres-configs"
    data:
      # -- What db is created, also sets demoapp DB_NAME var
      db_name: "test_db1"
      # -- Postgres data dir
      pg_data: "/data/pgdata" 
    

  secret:
    # -- Secret name for postgres
    name: "postgres-secrets"
    data:
      # -- Postgres user, also sets demoapp DB_USER. B64 encoded, change if you already have a DB with the proper user
      db_user: "dGVzdF91c2Vy"
      # -- Postgress pass, also sets demoapp DB_PASS. B64 encoded, change if you already have a DB with the proper password
      db_master_password: "MCZBbmI1dDBvWWpnWHZOb3hZMkw="

  service:
    type: NodePort
    port: 5432
    targetPort: 5432

  resources:
    requests:
      # -- Bare minimum resources to run postgres
      memory: "265Mi"
      # -- Bare minimum resources to run postgres
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"

  volumeMount:
    # -- VolumeMount name for postgres
    name: "postgres-volume"
    # -- Path where vol is mounted
    path: "/data"
  pv:
    # -- Pv definition for postgres
    name: "postgres-pv"
    # -- Where we're saving the data on the host
    hostPath: "/mnt/data"

  pvClaim:
    # -- PvClaim for postgres
    name: "postgres-pv-claim"
    # -- StorageClass, change as needed. Also sets postgres.pv.storageClass
    storageClass: "manual"
    # -- Capacity, change as needed. Also sets postgres.pv.capacity
    capacity: "25Gi"
    # -- AccessModes, change as needed. Also sets postgres.pv.accessModes
    accessModes:
      - ReadWriteOnce

  autoscaling: 
    # -- Disabling autoscaling
    enabled: False
  imagePullSecrets: {}
  podAnnotations: {}
  selectorLabels:
    app: "postgres"
  serviceAccountName: {}
  podSecurityContext:
    runAsUser: postgres

#### PROMETHEUS CONFIG ####
prometheus:
  fullname: "prometheus"

  # -- If you're running in a different namespace or if you already have a prometheusql instance
  namespace: "default"
  # -- Default number of replicas
  replicaCount: 1
  labels:
  # -- Label to select pod
    app: "prometheus"
  image:
    # -- prometheus image
    repository: prom/prometheus
    # -- Using latest tag
    tag: latest
    pullPolicy: IfNotPresent

  configMap:
    config:
      # -- ConfigMap name for prometheus
      name: "prometheus-configs"
      # -- Set timeout for alert, defaults to 0 to showcase alerting
      alert_threshold: 0
      # -- Set after how long the alert will fire, default to 1m
      alert_fires: "1m"

  service:
    type: LoadBalancer
    port: 9090
    targetPort: 9090

  resources:
    requests:
      # -- Bare minimum resources to run prometheus
      memory: "500M"
      # -- Bare minimum resources to run prometheus
      cpu: "500m"
    limits:
      memory: "1Gi"
      cpu: 1

  volumeMount:
    config:
      # -- VolumeMount name for prometheus
      name: "prometheus-config"
      # -- Path where vol is mounted
      path: "/etc/prometheus"
    storage:
      # -- VolumeMount name for prometheus
      name: "prometheus-storage"
      # -- Path where vol is mounted
      path: "/prometheus"

  autoscaling: 
    # -- Disabling autoscaling
    enabled: False
  imagePullSecrets: {}
  podAnnotations: {}
  selectorLabels:
    app: "prometheus"
  serviceAccountName: {}
  podSecurityContext: {}


alertmanager:
  fullname: "alertmanager"

  # -- If you're running in a different namespace
  namespace: "default"
  # -- Default number of replicas
  replicaCount: 1
  labels:
  # -- Label to select pod
    app: "alertmanager"
  image:
    # -- alertmanager image
    repository: prom/alertmanager
    # -- Using latest tag
    tag: latest
    pullPolicy: IfNotPresent

  configMap:
    config:
      name: "alertmanager-configs"
    # -- ConfigMap name for alertmanager
      slack: 
        # -- Receiver name
        name: "slack"
        # -- Filters
        group_by: "['alertname', 'priority']"
        # -- How long to wait before alerting
        wait: "10s"
        # -- How long to resend message if alert still up
        repeat_interval: "2m"
        # -- Slack hook url
        url_endpoint: "https://hooks.slack.com/services/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"
        # -- Slack channel
        channel: "#alerting"
    template:
      name: "alerting-template"



  service:
    type: NodePort
    port: 9093
    targetPort: 9093

  resources:
    requests:
      # -- Bare minimum resources to run alertmanager
      memory: "500M"
      # -- Bare minimum resources to run alertmanager
      cpu: "500m"
    limits:
      memory: "1Gi"
      cpu: 1

  volumeMount:
    config:
      # -- VolumeMount name for alertmanager
      name: "alertmanager-config"
      # -- Path where vol is mounted
      path: "/etc/alertmanager"
    storage:
      # -- VolumeMount name for alertmanager storage
      name: "alertmanager-storage"
      # -- Path where vol is mounted
      path: "/alertmanager"
    template:
      # -- VolueMount name for alertmanager templates
      name: "alertmanager-template"
      path: "/etc/alertmanager-templates"


  autoscaling: 
    # -- Disabling autoscaling
    enabled: False
  imagePullSecrets: {}
  podAnnotations: {}
  selectorLabels:
    app: "alertmanager"
  serviceAccountName: {}
  podSecurityContext: {}